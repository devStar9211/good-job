<?php
/**
 * Application level Controller
 *
 * This file is application-wide controller file. You can put all
 * application-wide controller-related methods here.
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Controller
 * @since         CakePHP(tm) v 0.2.9
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */

App::uses('Controller', 'Controller');

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package		app.Controller
 * @link		http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */
class AppController extends Controller {
    var $components = array(
        'Session',
        'Cookie',
        'Acl' ,
        'Auth',
        'RequestHandler',
        'Paginator',
        'Export.Export',
        'Base'
    );

    public $helpers = array('Session', 'Form' => array('className' => 'CkForm'),'Html','Grid');

    public function beforeRender()
    {
        Configure::configured();
        parent::beforeRender(); // TODO: Change the autogenerated stub

        $user = $this->Auth->user();
        if($user) {

            $menu = Configure::read('admin_menu') ? Configure::read('admin_menu') : array();
            foreach ($menu as $key => $item) {
                if(isset($item['url']) && is_array($item['url'])) {
                    $controllerNameTemp = explode('_', $item['url']['controller']);

                    $controllerName = '';
                    foreach ($controllerNameTemp as $element ) {
                        $controllerName .= ucfirst($element);
                    }

                    $pluginName = !is_null($item['url']['plugin']) ? $item['url']['plugin'] . '/' : '';


                    $permissionStr = 'controllers/' . $pluginName  . $controllerName . '/' . $item['url']['action'];
                    $check = $this->Acl->check(array('GroupPermission' => array('id' => $user['group_permission_id'])), $permissionStr);
                    if(!$check) unset($menu[$key]);
                } else {
                    if(!empty($item['childs'])) {
                        foreach ($item['childs'] as $k => $child) {
                            $controllerNameTemp = explode('_', $child['url']['controller']);

                            $controllerName = '';
                            foreach ($controllerNameTemp as $element ) {
                                $controllerName .= ucfirst($element);
                            }

                            $pluginName = isset($item['url']['plugin']) && !is_null($item['url']['plugin']) ? $item['url']['plugin'] . '/' : '';

                            $permissionStr = 'controllers/' . $pluginName . $controllerName . '/' . $child['url']['action'];

                            $check = $this->Acl->check(array('GroupPermission' => array('id' => $user['group_permission_id'])), $permissionStr);
                            if(!$check) unset($menu[$key]['childs'][$k]);
                        }
                    }
                }
            }

            foreach ($menu as $key => $item) {
                if(isset($item['childs']) && count($item['childs']) == 0) {
                    unset($menu[$key]);
                }
            }

            Configure::write('admin_menu', $menu);
        }
        $this->set('user', $user);
        $this->set('isEmployeeRegisterOnly', $this->Base->isEmployeeRegisterOnly($user));

        $require_email = $this->Base->requiredEmail($this->Session->read());
        $this->set('require_email', $require_email);
    }

    public function beforeFilter() {
        // setup authentication
        $this->__configAuth();

        // setup layout
        $this->__configLayout();

        // set allow all
//         $this->Auth->allow();
    }

    private function __configAuth(){
        AuthComponent::$sessionKey = 'Auth.Account';
        $this->Auth->loginAction = array('controller' => 'accounts', 'action' => 'login', 'admin' => false);
        //$this->Auth->loginRedirect = array('controller' => 'dashboard', 'action' => 'index', 'admin' => false);
        $this->Auth->logoutRedirect = array('controller' => 'accounts', 'action' => 'login', 'admin' => false);
        $this->Auth->authenticate = array(
            'all' => array(
                'userModel' => 'Account',
            ),
            'Form' => array(
                'passwordHasher' => 'Blowfish',
            )
        );
        $this->Auth->authorize = array(
            //'Controller',
            'Actions' => array('actionPath' => 'controllers', 'userModel' => 'Account')
            // 'Actions' => array('actionPath' => 'controllers', 'userModel' => 'Account')
        );

        $this->Auth->unauthorizedRedirect = false;
    }

    private function __configLayout(){
        if ($this->request->prefix == 'admin') {
            $this->layout = "adminlte";
        } else {
            $this->layout = "adminlte";
        }
    }

    // public function isAuthorized() {
    //     return true;
    // }
}